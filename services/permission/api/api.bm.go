// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: api.proto

/*
Package api is a generated blademaster stub package.
This code was generated with kratos/tool/protobuf/protoc-gen-bm v0.1.

package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

It is generated from these files:
	api.proto
*/
package api

import (
	"context"

	bm "github.com/bilibili/kratos/pkg/net/http/blademaster"
	"github.com/bilibili/kratos/pkg/net/http/blademaster/binding"
)
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathPermissonPing = "/permisson.service.v1.Permisson/Ping"
var PathPermissonSayHello = "/permisson.service.v1.Permisson/SayHello"
var PathPermissonSayHelloURL = "/kratos-demo/say_hello"
var PathPermissonPermissionSave = "/permission/save"

// PermissonBMServer is the server API for Permisson service.
type PermissonBMServer interface {
	Ping(ctx context.Context, req *google_protobuf1.Empty) (resp *google_protobuf1.Empty, err error)

	SayHello(ctx context.Context, req *HelloReq) (resp *google_protobuf1.Empty, err error)

	SayHelloURL(ctx context.Context, req *HelloReq) (resp *HelloResp, err error)

	PermissionSave(ctx context.Context, req *PermissionSaveReq) (resp *PermissionSaveResp, err error)
}

var PermissonSvc PermissonBMServer

func permissonPing(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := PermissonSvc.Ping(c, p)
	c.JSON(resp, err)
}

func permissonSayHello(c *bm.Context) {
	p := new(HelloReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := PermissonSvc.SayHello(c, p)
	c.JSON(resp, err)
}

func permissonSayHelloURL(c *bm.Context) {
	p := new(HelloReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := PermissonSvc.SayHelloURL(c, p)
	c.JSON(resp, err)
}

func permissonPermissionSave(c *bm.Context) {
	p := new(PermissionSaveReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := PermissonSvc.PermissionSave(c, p)
	c.JSON(resp, err)
}

// RegisterPermissonBMServer Register the blademaster route
func RegisterPermissonBMServer(e *bm.Engine, server PermissonBMServer) {
	PermissonSvc = server
	e.GET("/permisson.service.v1.Permisson/Ping", permissonPing)
	e.GET("/permisson.service.v1.Permisson/SayHello", permissonSayHello)
	e.GET("/kratos-demo/say_hello", permissonSayHelloURL)
	e.GET("/permission/save", permissonPermissionSave)
}
